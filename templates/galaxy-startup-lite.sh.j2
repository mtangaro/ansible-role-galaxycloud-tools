#!/bin/bash

# ELIXIR-IIB - The Italian Infrastructure for Bioinformatics
# IBIOM-CNR
#
# Contributors:
# author: Tangaro Marco
# email: ma.tangaro@ibiom.cnr.it
#
# Usage: galaxy-startup-lite [start,stop]

GALAXY='{{galaxy_install_path}}'
GALAXY_USER='{{galaxy_user}}'

#########
#Â Galaxy configuration variables
# Do not change this values.
#export GALAXY_CONFIG_FILE='{{ galaxy_config_file }}.sample'
#export GALAXY_CONFIG_DATABASE_CONNECTION='{{ galaxy_database_connection.stdout  }}'
#export GALAXY_CONFIG_INSTALL_DATABASE_CONNECTION='{{ galaxy_install_database_connection.stdout }}'
#export GALAXY_CONFIG_TOOL_DEPENDENCY_DIR='{{ galaxy_tool_deps_path.stdout }}'
#export GALAXY_CONDA_PREFIX='{{ conda_prefix }}'
#DEFAULT_JOB_CONF={{galaxy_config_path}}/job_conf.xml.sample_basic
#export GALAXY_CONFIG_JOB_CONFIG_FILE=$DEFAULT_JOB_CONF
#export GALAXY_CONFIG_ADMIN_USERS='{{ galaxy_admin_users.stdout }}'

# allow galaxy configured to start using a proxy, to start with run.sh
# if the static_enabled option is configure in galaxy.ini you have to comment it or set to
# static_enabled = True
# allow_library_path_paste = True
#export GALAXY_CONFIG_STATIC_ENABLED=True
#export GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE=True
#unset GALAXY_CONFIG_NGINX_UPLOAD_STORE
#unset GALAXY_CONFIG_NGINX_UPLOAD_PATH

# The lite mode can be useful to populate data libraries.
# To make this work it is needed to unset the following variables
#unset GALAXY_CONFIG_JOB_WORKING_DIRECTORY
#unset GALAXY_CONFIG_FILE_PATH
#unset GALAXY_CONFIG_NEW_FILE_PATH
#unset GALAXY_CONFIG_TEMPLATE_CACHE_PATH
#unset GALAXY_CONFIG_CITATION_CACHE_DATA_DIR
#unset GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY
#unset GALAXY_CONFIG_FTP_UPLOAD_DIR
#unset GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG
#########

#---
install_log="$GALAXY/galaxy_startup_lite.log"
install_pidfile="$GALAXY/galaxy_startup_lite.pid"
#---
postgresql_version='9.6'
#---
ephemeris_version='{{ephemeris_version}}'


#________________________________
# Get Distribution
if [[ -r /etc/os-release ]]; then
    . /etc/os-release
fi

#________________________________
# Check if postgresql is running
function start_postgresql_vm {

  if [[ $ID = "ubuntu" ]]; then
    echo "[Ubuntu][VM] Check postgresql."
    if [[ $VERSION_ID = "16.04" ]]; then
      service start postgresql
    else
      systemctl start postgresql
    fi
  elif [[ $ID = "centos" ]]; then
      echo "[EL][VM] Check postgresql"
      systemctl start postgresql-${postgresql_version}
  fi
}

#________________________________
function check_postgresql_docker {

  if [[ $ID = "ubuntu" ]]; then
    echo "[Ubuntu][Docker] Check postgresql."
    service start postgresql
  elif [ "$ID" = "centos" ]; then
    echo "[EL][Docker] Check postgresql"
    if [[ ! -f /var/lib/pgsql/${postgresql_version}/data/postmaster.pid ]]; then
      echo "Starting postgres on centos"
      sudo -E -u postgres /usr/pgsql-${postgresql_version}/bin/pg_ctl -D /var/lib/pgsql/${postgresql_version}/data -w start
    fi
  fi

}

#________________________________
function check_postgres_status {

  PGUSER="${PGUSER:="postgres"}"

  if [[ $ID = "ubuntu" ]]; then
    echo 'placeholder'
  elif [ "$ID" = "centos" ]; then
    /usr/pgsql-${postgresql_version}/bin/pg_isready -U "$PGUSER" -q
    DATA=$?
  fi

}

#________________________________
function check_postgresql {

{% if ansible_virtualization_type == "docker" %}
  check_postgresql_docker
{% else %}
  check_postgresql_vm
{% endif %}

  check_postgres_status

  # wait for database to finish starting up
  while [[ ${DATA}  != 0 ]]
  do
    echo "waiting for database."
    check_postgres_status
    sleep 1
  done

}

#________________________________
# Install lsof

function install_lsof {
  if [[ $ID = "ubuntu" ]]; then
    echo "[Ubuntu] Installing lsof with apt."
    apt-get install -y lsof
  else
    echo "[EL] Installing lsof with yum."
    yum install -y lsof
  fi
}

#________________________________
function check_lsof {
  type -P lsof &>/dev/null || { echo "lsof is not installed. Installing.."; install_lsof; }
}

#________________________________
function install_ephemeris {
  echo "Load clean virtual environment"
  virtualenv /tmp/tools_venv
  source /tmp/tools_venv/bin/activate
  echo "Install ephemeris using pip in the clean environment"
  pip install bioblend
  pip install ephemeris==$ephemeris_version
}

#________________________________
function galaxy_start {

  # clean logs
  echo "Clean logs"
  rm $install_log
  rm $install_pidfile

  # install ephemeris
  install_ephemeris

  # ensure Galaxy is not running through supervisord
  if pgrep "supervisord" > /dev/null
  then
    echo "Galaxy managed using supervisord. Shutting it down."
    supervisorctl stop galaxy:
  fi

  # ensure galaxy is not running on run.sh and 8080 port
  check_lsof
  echo "Kill run.sh Galaxy instance listening on 8080 port"
  kill -9 $(lsof -t -i :8080)
  # install lsof to be sure

  # check PostgreSQL
  check_postgresql

  # create log file
  sudo -E -u $GALAXY_USER touch $install_log

  # start Galaxy
  export PORT=8080
  echo "starting Galaxy"
  #sudo -E -u $GALAXY_USER $GALAXY/run.sh -d $install_log --pidfile $install_pidfile  --http-timeout 3000 --skip-eggs --skip-wheels
  sudo -E -u $GALAXY_USER $GALAXY/run.sh -d $install_log --pidfile $install_pidfile  --http-timeout 3000 

  # wait galaxy to start
  galaxy_install_pid=`cat $install_pidfile`
  echo $galaxy_install_pid
  galaxy-wait -g http://localhost:$PORT -v --timeout 120

}

#________________________________
function galaxy_stop {
  echo "stopping Galaxy"
  sudo -E -u $GALAXY_USER $GALAXY/run.sh --stop $install_pidfile

{% if ansible_virtualization_type == "docker" %}
# stop postgresql on docker. Keep it running on vm
if [[ -r /etc/os-release ]]; then
  . /etc/os-release
  echo $ID
  if [ "$ID" = "ubuntu" ]; then
    echo "[Ubuntu][Docker] Stop postgresql."
    service stop postgresql
  elif [ "$ID" = "centos" ]; then
    echo "[EL][Docker] Stop postgresql"
    sudo -Hiu postgres /usr/pgsql-${postgresql_version}/bin/pg_ctl -D /var/lib/pgsql/${postgresql_version}/data stop
  fi
fi
{% endif %}

  #echo "uset all variables"
  #unset GALAXY_CONFIG_FILE
  #unset GALAXY_CONFIG_DATABASE_CONNECTION
  #unset GALAXY_CONFIG_DATABASE_CONNECTION_INSTALL
  #unset GALAXY_CONFIG_TOOL_DEPENDENCY_DIR
  #unset GALAXY_CONFIG_ADMIN_USERS
  #unset GALAXY_CONFIG_STATIC_ENABLED
  #unset GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE
  #unset GALAXY_CONFIG_NGINX_UPLOAD_STORE
  #unset GALAXY_CONFIG_NGINX_UPLOAD_PATH
  #unset GALAXY_CONFIG_JOB_WORKING_DIRECTORY
  #unset GALAXY_CONFIG_FILE_PATH
  #unset GALAXY_CONFIG_NEW_FILE_PATH
  #unset GALAXY_CONFIG_TEMPLATE_CACHE_PATH
  #unset GALAXY_CONFIG_CITATION_CACHE_DATA_DIR
  #unset GALAXY_CONFIG_CLUSTER_FILES_DIRECTORY
  #unset GALAXY_CONFIG_FTP_UPLOAD_DIR
  #unset GALAXY_CONFIG_INTEGRATED_TOOL_PANEL_CONFIG
  #unset GALAXY_CONFIG_JOB_CONFIG_FILE
}

#________________________________
# main

if [ "$1" == "start" ]; then
  galaxy_start
elif [ "$1" == "stop" ]; then
  galaxy_stop
else
  echo "Usage: galaxy-startup-lite [start, stop]"
fi
